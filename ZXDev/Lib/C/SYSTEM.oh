#ifndef SYSTEM__oh
#define SYSTEM__oh

/*

the Ofront runtime system interface and macros library
copyright (c) Josef Templ, 1995, 1996

gcc for Linux version (same as SPARC/Solaris2)
uses double # as concatenation operator

*/

#include "XDevCfg.h"

extern void *memcpy(void *dest, const void *src, int n);
extern void *malloc(int size);
extern void free (void *ptr);
extern void exit(int status);

#define export
#define import extern

/* constants */
#define __MAXEXT	16
#define NIL	0
#define POINTER__typ	(int*)1	/* not NIL and not a valid type */

/* basic types */
typedef unsigned char BOOLEAN;
typedef signed char   BYTE;
typedef unsigned char CHAR;
typedef int           SHORTINT;
typedef long          INTEGER;   // 32 bit
typedef long long     LONGINT;   // 64 bit
typedef unsigned char SET;       // 8 bit
typedef float         SHORTREAL;
typedef float         REAL;
typedef void*         SYSTEM_PTR;
typedef int           SYSTEM_ADRINT;
typedef int           SYSTEM_ARRLEN; // see also OPM.IndexSize and MaxIndex

// Unsigned variants are for use by shift and rotate macros

typedef unsigned char      __U_BYTE;
typedef unsigned char      __U_CHAR;
typedef unsigned int       __U_SHORTINT;
typedef unsigned long      __U_INTEGER;
typedef unsigned char      __U_SET;
typedef unsigned long long __U_LONGINT;

/* runtime system routines */
extern SHORTINT SYSTEM_DIVS (SHORTINT x, SHORTINT y);
extern INTEGER SYSTEM_DIV (INTEGER x, INTEGER y);
extern LONGINT SYSTEM_DIVL (LONGINT x, LONGINT y);
extern SHORTINT SYSTEM_MODS (SHORTINT x, SHORTINT y);
extern INTEGER SYSTEM_MOD (INTEGER x, INTEGER y);
extern LONGINT SYSTEM_MODL (LONGINT x, LONGINT y);
extern long SYSTEM_ENTIER (float x);
extern SHORTINT SYSTEM_ASH (SHORTINT x, BYTE n);
extern INTEGER SYSTEM_ASHL (INTEGER x, BYTE n);
extern SHORTINT SYSTEM_ABSS (SHORTINT x);
extern INTEGER SYSTEM_ABS (INTEGER x);
extern LONGINT SYSTEM_ABSL (LONGINT x);
extern SHORTREAL SYSTEM_ABSF (REAL x);
extern SHORTINT SYSTEM_MINS (SHORTINT x, SHORTINT y);
extern INTEGER SYSTEM_MIN (INTEGER x, INTEGER y);
extern LONGINT SYSTEM_MINL (LONGINT x, LONGINT y);
extern SHORTREAL SYSTEM_MINF (REAL x, REAL y);
extern SHORTINT SYSTEM_MAXS (SHORTINT x, SHORTINT y);
extern INTEGER SYSTEM_MAX (INTEGER x, INTEGER y);
extern LONGINT SYSTEM_MAXL (LONGINT x, LONGINT y);
extern SHORTREAL SYSTEM_MAXF (REAL x, REAL y);
extern int SYSTEM_XCHK (int i, int ub);
extern long SYSTEM_RCHK();
extern int SYSTEM_STRCMPCC (CHAR *x, CHAR *y);
extern void SYSTEM_STRCOPYCC (CHAR *to, CHAR *from) __z88dk_callee __preserves_regs(iyl,iyh);
extern void SYSTEM_STRAPNDCC (CHAR *from, CHAR *to) __z88dk_callee __preserves_regs(iyl,iyh);
extern SHORTINT SYSTEM_STRLEN (CHAR *str) __z88dk_fastcall __preserves_regs(d,e,iyl,iyh);
extern SYSTEM_PTR SYSTEM_NEWREC();
extern SYSTEM_PTR SYSTEM_NEWBLK (__U_SHORTINT size);
extern SYSTEM_PTR SYSTEM_NEWARR (__U_SHORTINT size);
extern SYSTEM_PTR SYSTEM_REGMOD();
#ifdef SYSTEM_IncRef
  extern void SYSTEM_INCREF();
#else
#  define SYSTEM_INCREF(proc) proc
#endif
extern void SYSTEM_REGCMD();
extern void SYSTEM_REGTYP();
extern void SYSTEM_REGFIN();
//extern void SYSTEM_FINALL();
#define SYSTEM_FINALL()
extern void SYSTEM_INIT();
//extern void SYSTEM_FINI();
#define SYSTEM_FINI()
extern void SYSTEM_HALT_m1 (BYTE n) __z88dk_fastcall;
#define SYSTEM_HALT(n) SYSTEM_HALT_m1(n-1)
extern void SYSTEM_INHERIT();
extern void SYSTEM_ENUMP();
extern void SYSTEM_ENUMR();

/* module registry */
#ifdef SYSTEM_RegisterModules
#  define __DEFMOD	static void *m; if(m!=0)return m
#  define __REGMOD(name, enum)	if(m==0)m=SYSTEM_REGMOD((CHAR*)name,enum); else return m
#  define __ENDMOD	return m
#else
#ifndef _Z88
#  define __DEFMOD	__asm LD HL,#. \
     LD (HL),#0xC9 \
     __endasm
#else
#  define __DEFMOD	__asm __entry_point__$: LD HL,#__entry_point__$ \
     LD (HL),#0xC9 \
     __endasm
#endif
#  define __REGMOD(name, enum)
#  define __ENDMOD
#endif
#ifdef SYSTEM_RegisterMain
#  define __INIT(argc, argv)	static void *m; SYSTEM_INIT(argc, (long)&argv);
#  define __REGMAIN(name, enum)	m=SYSTEM_REGMOD(name,enum)
#else
#  define __INIT(argc, argv)
#  define __REGMAIN(name, enum)
#endif
#define __FINI	SYSTEM_FINI(); return
#define __IMPORT(name__init)	SYSTEM_INCREF(name__init())
#ifdef SYSTEM_RegisterCommands
#  define __REGCMD(name, cmd)	SYSTEM_REGCMD(m, name, cmd)
#else
#  define __REGCMD(name, cmd)
#endif
#define __EXTERN extern

/* SYSTEM ops */
#define __SYSNEW(p, len)	p=SYSTEM_NEWBLK((long)(len))
#define __VAL(t, x)	(*(t*)&(x))
#define __GET(a, x, t)	x= *(t*)(a)
#define __PUT(a, x, t)	*(t*)(a)=x
#define __LSHL(x, n, t)	((t)((unsigned)(x)<<(n)))
#define __LSHR(x, n, t)	((t)((unsigned)(x)>>(n)))
#define __LSH(x, n, t)	((n)>=0? __LSHL(x, n, t): __LSHR(x, -(n), t))
#define __ROTL(x, n, t)	((t)((unsigned)(x)<<(n)|(unsigned)(x)>>(8*sizeof(t)-(n))))
#define __ROTR(x, n, t)	((t)((unsigned)(x)>>(n)|(unsigned)(x)<<(8*sizeof(t)-(n))))
#define __ROT(x, n, t)	((n)>=0? __ROTL(x, n, t): __ROTR(x, -(n), t))
#define __BIT(x, n)	(*(unsigned long*)(x)>>(n)&1)
#define __MOVE(s, d, n)	memcpy((char*)(d),(char*)(s),n)

/* std procs and operator mappings */
#define __CONSTARR const
#define __SHORT(x, y)	((int)((unsigned long)(x)+(y)<(y)+(y)?(x):(__HALT(-8,mod,pos),0)))
#define __SHORTF(x, y)	((int)(__RF((x)+(y),(y)+(y))-(y)))
#define __CHR(x)	((CHAR)__R(x, 256))
#define __CHRF(x)	((CHAR)__RF(x, 256))
#define __DIV(x, y)	((x)>=0?(x)/(y):-1-(-1-(x))/(y))
#define __DIVFS(x, y)	SYSTEM_DIVS(x, y)
#define __DIVF(x, y)	SYSTEM_DIV(x, y)
#define __DIVFL(x, y)	SYSTEM_DIVL(x, y)
#define __MOD(x, y)	((x)>=0?(x)%(y):(y)-1+((x)+1)%(y))
#define __MODFS(x, y)	SYSTEM_MODS(x, y)
#define __MODF(x, y)	SYSTEM_MOD(x, y)
#define __MODFL(x, y)	SYSTEM_MODL(x, y)
#ifdef SYSTEM_NoGC
#  define __NEW(p, t)	p=SYSTEM_NEWBLK(sizeof(struct t))
#  define __NEWARR(typ, elemsz, elemalgn, nofdim, nofdyn, va_alist) \
	SYSTEM_NEWARR(elemalgn*va_alist);
#else
#  define __NEW(p, t)	p=SYSTEM_NEWREC((long)t##__typ)
#  define __NEWARR	SYSTEM_NEWARR
#endif

#define __HALT(x, mod, pos)	SYSTEM_HALT(x)
#ifndef SYSTEM_NoASSERT
#  define __ASSERT(cond, x, mod, pos)	if (!(cond)) {SYSTEM_assert = x; SYSTEM_HALT(-1);}
#else
#  define __ASSERT(cond, x, mod, pos)
#endif
#define __ENTIER(x)	SYSTEM_ENTIER(x)
#define __ABS(x)	(((x)<0)?-(x):(x))
#define __ABSFS(x)	SYSTEM_ABSS(x)
#define __ABSF(x)	SYSTEM_ABS (x)
#define __ABSFL(x)	SYSTEM_ABSL(x)
#define __ABSFF(x)	SYSTEM_ABSF(x)
#define __ABSFD(x)	SYSTEM_ABSF(x)
#define __CAP(ch)	((CHAR)((ch)&0x5f))
#define __ODD(x)	((x)&1)
#define __IN(x, s)	(((s)>>(x))&1)
#define __SETOF(x)	((SET)1<<(x))
#define __SETRNG(l, h)	((~(SET)0<<(l))&~(SET)0>>(8*sizeof(SET)-1-(h)))
#define __MASK(x, m)	((x)&~(m))
#define __COPY(s, d, n)	{char*_a=(void*)s,*_b=(void*)d;long _i=0,_t=n-1;while(_i<_t&&((_b[_i]=_a[_i])!=0)){_i++;};_b[_i]=0;}
#define __STRAPNDCC(src, src_len, dst, dst_len, mod, pos)	SYSTEM_STRAPNDCC(src, dst)
#define __STRCMPCC(src, src_len, dst, dst_len, mod, pos)	SYSTEM_STRCMPCC(src, dst)
#define __STRCOPYCC(src, dst, max_len, mod, pos)	SYSTEM_STRCOPYCC(dst, src)
#define __STRLEN(str, len, mod, pos)	SYSTEM_STRLEN(str)
#define __ASH(x, n, t)	((n)>=0?__ASHL(x,n,t):__ASHR(x,-(n),t))
#define __ASHL(x, n, t)	((t)(x)<<(n))
#define __ASHR(x, n, t) ((t)(x)>>(n))
#define __ASHF(x, n, t)	SYSTEM_ASH(x, n)
#define __ASHFL(x, n, t)	SYSTEM_ASHL(x, n)
#define __DUP(x, l)     // x=(void*)memcpy(malloc(l*sizeof(*x)),x,l*sizeof(*x))
#define __DUPARR(v)     // v=(void*)memcpy(v##__copy,v,sizeof(v##__copy))
#define __DEL(x)	// free(x)
#define __IS(tag, typ, level)	(*(tag-(__BASEOFF-level))==(long)typ##__typ)
#define __TYPEOF(p)	(*(((long**)(p))-1))
#define __ISP(p, typ, level)	__IS(__TYPEOF(p),typ,level)
#define __MIN(x, y)	    ((x)<(y)?(x):(y))
#define __MINFS(x, y)	  SYSTEM_MINS(x, y)
#define __MINF(x, y)	  SYSTEM_MIN(x, y)
#define __MINFL(x, y)	  SYSTEM_MINL(x, y)
#define __MINFF 	      SYSTEM_MINF(x, y)
#define __MINFD 	      SYSTEM_MINF(x, y)
#define __MAX(x, y)	    ((x)>(y)?(x):(y))
#define __MAXFS(x, y)	  SYSTEM_MAXS(x, y)
#define __MAXF(x, y)	  SYSTEM_MAX(x, y)
#define __MAXFL(x, y)	  SYSTEM_MAXL(x, y)
#define __MAXFF 	      SYSTEM_MAXF(x, y)
#define __MAXFD 	      SYSTEM_MAXF(x, y)

/* runtime checks */
#define __X(i, ub, mod, pos)	(((unsigned)(i)<(unsigned)(ub))?i:(__HALT(3,mod,pos),0))
#define __XF(i, ub, mod, pos)	SYSTEM_XCHK((i), (ub))
#ifndef SYSTEM_NoCheck_RETURN
#  define __RETCHK	__retchk: __HALT(-3,mod,pos)
#else
#  define __RETCHK
#endif
#ifndef SYSTEM_NoCheck_CASE
#  define __CASECHK	__HALT(-4,mod,pos)
#else
#  define __CASECHK
#endif
#define __GUARDP(p, typ, level)	((typ*)(__ISP(p,typ,level)?p:(__HALT(-5,mod,pos),p)))
#define __GUARDR(r, typ, level)	(*((typ*)(__IS(r##__typ,typ,level)?r:(__HALT(-5,mod,pos),r))))
#define __GUARDA(p, typ, level)	((struct typ*)(__IS(__TYPEOF(p),typ,level)?p:(__HALT(-5,mod,pos),p)))
#define __GUARDEQR(p, dyntyp, typ)	if(dyntyp!=typ##__typ) __HALT(-6,mod,pos);*(p)
#define __GUARDEQP(p, typ)	if(__TYPEOF(p)!=typ##__typ)__HALT(-6,mod,pos);*(p)
#define __WITHCHK	__HALT(-7,mod,pos)
#define __R(i, ub)	(((unsigned)(long)(i)<(unsigned long)(ub))?i:(__HALT(-8,mod,pos),0))
#define __RF(i, ub)	SYSTEM_RCHK((long)(i),(long)(ub))

/* record type descriptors */
#ifdef SYSTEM_RecTypeDesc
#  define __TDESC(t__desc, m, n) \
	static struct t__desc {\
		long tproc[m]; \
		long tag, next, level, module; \
		char name[24]; \
		long *base[__MAXEXT]; \
		char *rsrvd; \
		long blksz, ptr[n+1]; \
	} t__desc
#  define __TDFLDS(name, size)	{__EOM}, 1, 0, 0, 0, name, {0}, 0, size
#else
#  define __TDESC(t__desc, m, n) \
	static struct t__desc {\
		char tproc[m]; \
		char ptr[n+1]; \
	} t__desc
#  define __TDFLDS(name, size)	{0}
#endif

#define __BASEOFF	(__MAXEXT+1)
#define __TPROC0OFF	(__BASEOFF+24/sizeof(long)+5)
#define __EOM	1
#define __ENUMP(adr, n, P)	SYSTEM_ENUMP(adr, (long)(n), P)
#define __ENUMR(adr, typ, size, n, P)	SYSTEM_ENUMR(adr, typ, (long)(size), (long)(n), P)

#ifdef SYSTEM_InitTypes
#  define __INITYP(t, t0, level) \
	t##__typ= &t##__desc.blksz; \
	memcpy(t##__desc.base, t0##__typ - __BASEOFF, level*sizeof(long)); \
	t##__desc.base[level]=t##__typ; \
	t##__desc.module=(long)m; \
	if(t##__desc.blksz!=sizeof(struct t)) __HALT(-15,mod,pos); \
	t##__desc.blksz=(t##__desc.blksz+5*sizeof(long)-1)/(4*sizeof(long))*(4*sizeof(long)); \
	SYSTEM_REGTYP(m, (long)&t##__desc.next); \
	SYSTEM_INHERIT(t##__typ, t0##__typ)
#else
#  define __INITYP(t, t0, level)
#endif

/* Oberon-2 type bound procedures support */
#ifdef SYSTEM_TypeBoundProcDynCalls
#  define __INITBP(t, proc, num)	*(t##__typ-(__TPROC0OFF+num))=(long)proc
#  define __SEND(typ, procname, num, funtyp, parlist)	((funtyp)(*(typ-(__TPROC0OFF+num))))parlist
#else
#  define __INITBP(t, proc, num)
#  define __SEND(typ, procname, num, funtyp, parlist) procname parlist
#endif

#define main(argc, argv) main(void)

#endif
