MODULE [noinit] SysVar; IMPORT SYSTEM;

TYPE
  BYTE = SYSTEM.BYTE;

VAR
  KSTATE* (* #5C00 (23552) *) : ARRAY 8 OF BYTE;
(**
   Эта  переменная  построена  из 8 байт и
используется  для чтения клавиатуры и обс-
луживания  самоповторяемости  клавиш.  Для
программиста  лишь  ячейка с адресом #5C04
(23556) может иметь значение. Она содержит
значение  255, если ни одна клавиша не на-
жата,  или  код основного значения нажатой
клавиши в режиме C (большая литера алфави-
та  или  цифра).  PEEK  23556 дает поэтому
тот  же  самый эффект, что и CODE INKEY$ в
режиме  C. Достоинством является факт, что
значение  не  зависит от состояния курсора
(L  или  C).  В  случае нажатия нескольких
клавиш одновременно всегда будет распозна-
на  первая  (INKEY$ в такой ситуации может
игнорировать  все).  Клавиши  <CS> и <SS>,
нажимаемые по отдельности, не воздействуют
на нашу ячейку, но нажатые вместе дают код
14. Кроме того, комбинации <CS/9>, <CS/3>,
<CS/4>,  <CS/2> выдают соответственно коды
15,  4,  5,  6  (эти коды ловит также CODE
INKEY$). *)

  LAST_K* (* #5C08 (23560) *) : BYTE;
(**
   Эта байтовая переменная хранит код пос-
ледней  нажатой клавиши, независимо от то-
го, нажимают на нее или нет. В случае  на-
жатия нескольких - будет запомнен код пер-
вой.  В  отличие от предыдущей переменной,
LAST_K  следит  за  состоянием  курсора. С
этой переменной частично связана следующая
переменная. *)

   REPDEL* (* #5C09 (23651) *) : BYTE;
   REPPER* (* #5C0A (23652) *) : BYTE;
(**
   Две  эти переменные необходимо рассмат-
ривать одновременно. Первая из них опреде-
ляет как долго надо нажимать клавишу, что-
бы  заработал автоповтор, а вторая опреде-
ляет время между считыванием с клавиатуры.
В  обеих  переменных время дано в 1/50 се-
кунды.  По началу эти переменные инициали-
зированы  значениями  35  и 5, что обозна-
чает,  что  нажатая клавиша после 0. 7 сек
начинает саморазмножаться с темпом 10 зна-
ков в сек. В процессе считывания с клавиа-
туры  эти  значения  можно уменьшить до 0.
Придавая  им  значения  0, добиваются наи-
большей  остановки, продолжающейся столько
же,  сколько  PAUSE  256.  Занесение в эти
ячейки значения 1 приводят к тому, что ра-
бота  со  SPECTRUM  становится трудной, но
возможной  (ввод любой директивы с клавиа-
туры будет требовать от оператора отличной
реакции и чувствительности в пальцах). *)

   RASP* (* #5C38 (23608) *) : BYTE;
   PIP* (* #5C39 (23609) *) : BYTE;
(**
   Эти  переменные определяют звук, сопро-
вождающий  ввод  данных.  RASP задает дли-
тельность  (в 1/50 сек) предупредительного
ворчания,  когда SPECTRUM не желает больше
считывать   данные.   Начальное   значение
RASP=64  (1.  26 сек). PIP определяет дли-
тельность  звука,  подтверждающего нажатие
клавиши.  Начальное  значение PIP=0. Стоит
помнить,  что  RASP  и  PIP,  в отличие от
большинства  других  системных переменных,
не   инициализируются  заново  инструкцией
NEW. *)

  FLAGS* (* #5C3B (23611) *) : SET;
(**
   Сколько раз переменная LAST_K принимает
новое  значение, столько раз пятый бит пе-
ременной  FLAGS  устанавливается  в 1. Это
важно,  если  мы желаем распознать многок-
ратное  нажатие на одну и ту же клавишу. В
свою  очередь, третий бит этой переменной,
вместе  с  содержимым MODE, позволяет рас-
познать в какой ситуации относительно чте-
ния  клавиатуры  должен  быть  использован
курсор K. Однако, эту информацию можно ис-
пользовать лишь с уровня ассемблера. 7 бит
переменной  FLAGS  сигнализирует  системе,
что пришла выполняемая команда с клавиату-
ры  или  из программы. Размещенная в прог-
рамме  инструкция POKE 23611, 0 прервет ее
выполнение сообщением 0 OK. *)

   BORDER* (* #5C48 (23624) *) : BYTE;
(**
   Эта  переменная содержит атрибуты, опи-
сывающие  нижнюю  часть  экрана,  а  также
цвет рамки. В обычных условиях ZX-SPECTRUM
не позволяет устанавливать одинаковый цвет
для  фона и чернил в нижних строках (поль-
зователь  всегда должен видеть вводимые им
символы).  Спецификаторы  цветов  в списке
INPUT будут действенны только для текстов,
печатаемых  в нижней части экрана, но цвет
чернил для вводимых данных всегда устанав-
ливается  в 9 (белый или черный, в зависи-
мости  от  цвета  фона).  Обойти это можно
(например, если компьютер должен считывать
с   клавиатуры  тайный  пароль)  используя
команду  POKE  23624,  128+F+64*B+8*P+I  и
присваивая литерам F, B, P, I значения па-
раметров  команд  FLASH,  BRIGHT,  PAPER и
INK,  необходимых  для получения желаемого
эффекта.  Тем, кто не убежден, рекомендуем
получить  этот эффект другим способом:

   BORDER 3 : POKE 23624, 222 : CLS. *)

   SEED* (* #5C76 (23670) *) : INT16;
(**
   Эта  основа  генератора псевдослучайных
чисел.  Использование SEED рассматривалось
при описании функции RND. *)

   FRAMES* (* #5C78 (23672) *) : ARRAY 3 OF BYTE;
(**
   Три  байта  составляют  внутренние часы
ZX-SPECTRUM.  Они  представляют число PEEK
23672+256*PEEK  23673+65536*PEEK  23674  и
определяют  сколько  1/50 сек прошло с мо-
мента  инициализации системы. Максимальным
значением  является  2^24-1=16777215,  что
отвечает 3 суткам 21 часу 12 минутам и 24.
3  секундам.  Точность  таймера составляет
около 0. 01% или менее 9 сек в сутки. Этот
таймер   включается  на  то  время,  когда
SPECTRUM  обслуживает  внешние  устройства
(принтер, магнитофон, динамик), а также во
время  выполнения программы в машинном ко-
де, которые выключают или обходят контроль
за замаскированными прерываниями. *)

   COORDS* (* #5C7D (23677) *) : ARRAY 2 OF BYTE;
(**
   Два  последовательных  байта этой пере-
менной  содержат  координаты  (X, Y) точки
на  экране,  в которой завершила рисование
последняя  инструкция  PLOT, DRAW, CIRCLE.
Модификация  этой  переменной  дает тот же
самый  эффект,  что  и  PLOT OVER 1, K, N:
PLOT OVER 1, K, N, т. е. смещение указате-
ля  экрана  без рисования какой-либо точки
или линии. *)

   ATTR_P* (* #5C8D (23693) *) : BYTE;
   ATTR_T* (* #5C8F (23695) *) : BYTE;
(**
   Обе  переменные  однобайтовые  и хранят
значения  атрибутов FLASH, BRIGHT, PAPER и
INK.  Литера  P обозначает величины, уста-
новленные  постоянно  соответствующими ко-
мандами для всей программы, литера T - те-
кущие  значения,  устанавливаемые  теми же
самыми  командами,  размещенными в списках
соответствующих пишущих и рисующих команд.
При   отсутствии  спецификаторов  цвета  в
списках   пишущих  инструкций,  переменная
ATTR_P  копируется в ATTR_T. Способ хране-
ния информации о цветах в одном байте опи-
сан  в главе "Использование памяти". Пере-
менная  ATTR_P  может  быть использована в
программе  Бейсика  для  установления всех
атрибутов  одной инструкцией POKE. ATTR_T,
в свою очередь, может быть важна для прог-
раммирующих  в  машинном  коде,  так  как,
обычно,  используются  процедурами  памяти
ROM для установления заданных цветов. *)

   MASK_P* (* #5C8E (23694) *) : BYTE;
   MASK_T* (* #5C90 (23696) *) : BYTE;
(**
   Эти однобайтовые переменные используют-
ся  при  реализации  команд FLASH, BRIGHT,
PAPER,  INK с параметром 8. Значение литер
P  и T в именах переменных такое же самое,
как  для переменных ATTR. Установление ка-
кого-либо  бита  этих переменных в 1 озна-
чает,  что  бит  с  тем же самым номером в
соответствующем байте атрибутов должен ос-
таться  неизменным.  Обратим внимание, что
команда  INK  8  устанавливает  в  1 все 3
младших  бита переменной MASK_P. Модифици-
руя эту переменную инструкцией POKE можем,
например, установить в 1 только один млад-
ший бит. Тогда будет получен эффект фильт-
ра.  Неизменной  в  цвете чернил останется
только  основная  синяя  компонента,  в то
время как остальные могут подвергаться из-
менениям.  (Обратим  внимание  на  то, что
нумерация цветов совсем случайна. Цвет си-
ний  - 1, красный - 2, зеленый - 3 это ос-
новные  цвета, смесь которых позволяет по-
лучить  все  остальные. В ZX-SPECTRUM роль
смешивания  выполняет  добавление  номеров
соответствующих цветов. *)

   SPOSN* (* #5C88 (23688) *) : BYTE;
(**
   Эта  переменная (2 байта) содержит зна-
чения  33-K,  24-M,  где K, M - координаты
последнего  выведенного  на  экран  знака.
Непосредственная модификация этих перемен-
ных  затруднительна,  т. к. необходимо од-
новременно модифицировать DF_CC. *)

   DF_CC* (* #5C84 (23684) *) : BYTE;
(**
   Эта  переменная содержит адрес байта на
экране,  с  которого начинается вывод оче-
редного символа инструкцией PRINT. Модифи-
цируется  только  вместе  с Z_POSN. Значи-
тельно проще применить команду PRINT AT K,
N. *)

   SPONSL* (* #5C8A (23690) *) : BYTE;
   DFCCL* (* #5C86 (23686) *) : BYTE;
(**
   Переменные, аналогичные S_POSN и DF_CC,
описывающие нижнюю часть экрана. *)

   P_FLAG* (* #5C91 (23697) *) : BYTE;
(**
   Переменная, содержащая информацию о ре-
жиме  печати и рисования на экране. Описы-
вает режимы, установленные Бейсиком с  по-
мощью  инструкции  INVERSE,  OVER, INK 9 и
PAPER  9. Нечетные биты соответствуют пос-
тоянному заданию этих режимов, четные вре-
менному.
    __________________________________
   |           | временно | постоянно |
   |           | бит      | бит       |
   |-----------|----------|-----------|
   | OVER 1    | 0        | 1         |
   | INVERSE 1 | 2        | 3         |
   | INK 9     | 4        | 5         |
   | PAPER 9   | 6        | 7         |
   |___________|__________|___________|

   Если  необходимо  установить  постоянно
OVER  1:  INVERSE  1:  INK  9: PAPER 9, то
вместо  4-х  команд  достаточно одной POKE
23697, 2+8+32+128. *)

END SysVar.
